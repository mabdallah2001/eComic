package databaseproject;

import databaseproject.myDBCon;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

//This class creates the GUI for adding an employee, and implements all the needed
//functions in order to veryify the user input is valid, and then adds it to the db

public class RegisterForm extends javax.swing.JFrame {

    //instantiate a database connection
    myDBCon con = new myDBCon();

    public RegisterForm() {
        
        initComponents();
        clearErrorLabels();
        // center form in screen
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        UsernamelLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        confirmPasswordLabel = new javax.swing.JLabel();
        emailText = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        nameError = new javax.swing.JLabel();
        emailError = new javax.swing.JLabel();
        passwordError = new javax.swing.JLabel();
        confirmPasswordError = new javax.swing.JLabel();
        addressError = new javax.swing.JLabel();
        addressText = new javax.swing.JTextField();
        phoneError = new javax.swing.JLabel();
        phoneText = new javax.swing.JTextField();
        addressLabel1 = new javax.swing.JLabel();
        phoneLabel1 = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        showPassBox = new javax.swing.JCheckBox();
        passwordText = new javax.swing.JPasswordField();
        confirmPasswordText = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registration Form");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Customer Registration");

        nameLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        nameLabel.setText("Name:");

        UsernamelLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        UsernamelLabel.setText("Username:");

        passwordLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        passwordLabel.setText("Password:");

        confirmPasswordLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        confirmPasswordLabel.setText("Confirm Password:");

        emailText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        emailText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextActionPerformed(evt);
            }
        });

        submitButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        submitButton.setText("Register");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        nameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        nameError.setForeground(new java.awt.Color(255, 0, 0));
        nameError.setText("error label");

        emailError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        emailError.setForeground(new java.awt.Color(255, 0, 0));
        emailError.setText("error label");

        passwordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        passwordError.setForeground(new java.awt.Color(255, 0, 0));
        passwordError.setText("error label");

        confirmPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        confirmPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        confirmPasswordError.setText("error label");

        addressError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        addressError.setForeground(new java.awt.Color(255, 0, 0));
        addressError.setText("error label");

        addressText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        phoneError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        phoneError.setForeground(new java.awt.Color(255, 0, 0));
        phoneError.setText("error label");

        phoneText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        addressLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addressLabel1.setText("Address:");

        phoneLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        phoneLabel1.setText("Phone Number:");

        nameText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextActionPerformed(evt);
            }
        });

        showPassBox.setText("Show Password");
        showPassBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPassBoxActionPerformed(evt);
            }
        });

        passwordText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        passwordText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTextActionPerformed(evt);
            }
        });

        confirmPasswordText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        confirmPasswordText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmPasswordTextActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/databaseproject/pics/icons8-pow-50.png"))); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/databaseproject/pics/icons8-home-35.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(confirmPasswordLabel)
                            .addComponent(passwordLabel)
                            .addComponent(UsernamelLabel)
                            .addComponent(nameLabel)
                            .addComponent(addressLabel1)
                            .addComponent(phoneLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(confirmPasswordText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(submitButton)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(phoneError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(showPassBox)
                                        .addComponent(nameError, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(emailError, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(passwordError, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(confirmPasswordError, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nameError)
                        .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailError, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(UsernamelLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordError)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmPasswordError)
                    .addComponent(confirmPasswordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showPassBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressError)
                            .addComponent(addressLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneError)
                            .addComponent(phoneLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton))
                    .addComponent(jButton1))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emailTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTextActionPerformed
    //check if string is int
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    //clear all error labels
    void clearErrorLabels() {
        nameError.setText("");
        nameError.setVisible(false);
        emailError.setText("");
        emailError.setVisible(false);
        passwordError.setText("");
        passwordError.setVisible(false);
        confirmPasswordError.setText("");
        confirmPasswordError.setVisible(false);
        addressError.setText("");
        addressError.setVisible(false);
        phoneError.setText("");
        phoneError.setVisible(false);

    }
    //check if data is valid
    boolean isValidData() {

        clearErrorLabels();
        boolean result = true;
        
        if (nameText.getText().trim().isEmpty() || (nameText.getText().trim().length() > 50)) {
            if (nameText.getText().trim().isEmpty()) {
                nameError.setText("Invalid. Cannot be empty.");
            } else if (nameText.getText().trim().length() > 50) {
                nameError.setText("Invalid. Must be <= 50 chars.");
            }
            nameError.setVisible(true);
            result = false;
        }
        
        if (emailText.getText().trim().isEmpty() || (emailText.getText().trim().length() > 50)) {
            if (emailText.getText().trim().isEmpty()) {
                emailError.setText("Invalid. Cannot be empty.");
            } else if (emailText.getText().trim().length() > 50) {
                emailError.setText("Invalid. Must be <= 50 chars.");
            }
            emailError.setVisible(true);
            result = false;
        }
        
        if (passwordText.getText().trim().isEmpty() || passwordText.getText().trim().length()<8) {
            if (passwordText.getText().trim().isEmpty()) {
                passwordError.setText("Invalid. Cannot be empty.");
            } else {
                passwordError.setText("Invalid. Must be atleast 8 characters.");
            }
            passwordError.setVisible(true);
            result = false;
        }
        
        if (confirmPasswordText.getText().trim().isEmpty() || confirmPasswordText.getText().compareTo(passwordText.getText()) != 0) {
            if (confirmPasswordText.getText().trim().isEmpty()){
                confirmPasswordError.setText("Invalid. Cannot be empty.");
            } else if (confirmPasswordText.getText().compareTo(passwordText.getText()) != 0) {
                confirmPasswordError.setText("Invalid. Passwords don't match.");
                
            }
            confirmPasswordError.setText("Invalid. Cannot be empty.");
            confirmPasswordError.setVisible(true);
            result = false;
        }
        
        if (addressText.getText().trim().isEmpty()) {
            addressError.setText("Invalid. Cannot be empty.");
            addressError.setVisible(true);
            result = false;
        }
        
        if (phoneText.getText().trim().isEmpty() || !isInteger(phoneText.getText().trim()) || phoneText.getText().trim().length() != 10) {
            if (phoneText.getText().trim().isEmpty()) {
                phoneError.setText("Invalid. Cannot be empty.");
            } else {
                phoneError.setText("Invalid. Must be 10 integers.");
            }
            phoneError.setVisible(true);
            result = false;
        }
        
        return result;
    }
    //clear all the user inputs 
    void clearInputBoxes() {
        nameText.setText("");
        emailText.setText("");
        passwordText.setText("");
        confirmPasswordText.setText("");
        addressText.setText("");
        phoneText.setText("");
    }

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:

        try {
            // make the result set scrolable forward/backward updatable
            if (isValidData()) {
                //if user input is valid, create SQL command to insert tuple
                
                MessageDigest md = null;
                try {
                    md = MessageDigest.getInstance("MD5");
                } catch (NoSuchAlgorithmException ex) {
                    //Logger.getLogger(AddLogin.class.getName()).log(Level.SEVERE, null, ex);
                }
                byte[] hash = md.digest(passwordText.getText().getBytes());
                StringBuffer sb = new StringBuffer();
                
                for (int i = 0; i < hash.length; ++i) {
                    sb.append(Integer.toHexString((hash[i] & 0xFF) | 0x100).toUpperCase().substring(1, 3));
                }
                String encryptedPass = sb.toString().substring (8,24);
                
                String sqlCMD = "INSERT INTO LOGINUSERS VALUES ('" + emailText.getText() + "','" + encryptedPass + "', 1)";
                
                int result = con.executePrepared(sqlCMD);
                
                if (result > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("New loginUser added successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    // check validation errors
                }
                
                sqlCMD = "INSERT INTO CUSTOMER VALUES ('" + nameText.getText() + "','" + emailText.getText() + "','" + addressText.getText() + "','" + phoneText.getText() + "')";
                
                System.out.println(sqlCMD);
                
                result = con.executePrepared(sqlCMD);
                
                if (result > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("Customer Registered Successfully!");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    clearInputBoxes();
                    (new LoginForm()).setVisible(true);
                    this.dispose();
                } else {
                    // check validation errors 
                }
                
                
            } else {

                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new employee\n" + e.getMessage());
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void nameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextActionPerformed

    private void showPassBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPassBoxActionPerformed
        //if checkbox is checked/unchecked, change display type
        if(showPassBox.isSelected())
        {
        passwordText.setEchoChar((char)0);
        confirmPasswordText.setEchoChar((char)0);
        }
        else
        {
         passwordText.setEchoChar('●');
        confirmPasswordText.setEchoChar('●');       
        }
        
    }//GEN-LAST:event_showPassBoxActionPerformed

    private void passwordTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordTextActionPerformed

    private void confirmPasswordTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmPasswordTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confirmPasswordTextActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        (new mainScreen()).setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel UsernamelLabel;
    private javax.swing.JLabel addressError;
    private javax.swing.JLabel addressLabel1;
    private javax.swing.JTextField addressText;
    private javax.swing.JLabel confirmPasswordError;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JPasswordField confirmPasswordText;
    private javax.swing.JLabel emailError;
    private javax.swing.JTextField emailText;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel nameError;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel passwordError;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordText;
    private javax.swing.JLabel phoneError;
    private javax.swing.JLabel phoneLabel1;
    private javax.swing.JTextField phoneText;
    private javax.swing.JCheckBox showPassBox;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
