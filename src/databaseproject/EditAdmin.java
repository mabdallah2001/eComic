/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package databaseproject;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mohammed
 */
public class EditAdmin extends javax.swing.JFrame {

    myDBCon con = new myDBCon();    
    
    public EditAdmin(LoginUser luser) {
        initComponents();
        this.setLocationRelativeTo(null);
       //System.out.println(luser.username);
       //Use this as the key to filter the data in the where clause 
       
    //Set the error labels to false   
    lblNameError.setVisible(false);
    lblAddressError.setVisible(false);
    lblPhoneError.setVisible(false);
    lblPasswordError.setVisible(false);
    lblConfirmPasswordError.setVisible(false);
       
    //Testing the connection
    getNewData();

    }

    private void getNewData() {

        try {
            con.rs = con.executeStatement("select * from customer");
            //con.rs = con.executeStatement("select name, address, phone, username from customer where username like '"+ txtUsername.getText()+"'");
            // populate rest of fields
            con.rs.beforeFirst();
            con.rs.first();
            populateFields();
            txtPassword.setText("");
            txtConfirmPassword.setText("");
            
            
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected username.\n" + e.getMessage());
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainMenuButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblNameError = new javax.swing.JLabel();
        jLabelAddress = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblAddressError = new javax.swing.JLabel();
        lblPhoneError = new javax.swing.JLabel();
        jLabelPhone = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jLabelUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        btnPrevious = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        passwordLabel = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblPasswordError = new javax.swing.JLabel();
        confirmPasswordLabel = new javax.swing.JLabel();
        txtConfirmPassword = new javax.swing.JPasswordField();
        lblConfirmPasswordError = new javax.swing.JLabel();
        showPassBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Users");

        MainMenuButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        MainMenuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/databaseproject/home.png"))); // NOI18N
        MainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainMenuButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Edit Account Information");

        jLabelName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelName.setText("Name:");

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        lblNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("error label");

        jLabelAddress.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelAddress.setText("Address:");

        txtAddress.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });

        lblAddressError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblAddressError.setForeground(new java.awt.Color(255, 0, 0));
        lblAddressError.setText("error label");

        lblPhoneError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPhoneError.setForeground(new java.awt.Color(255, 0, 0));
        lblPhoneError.setText("error label");

        jLabelPhone.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelPhone.setText("Phone:");

        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabelUsername.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelUsername.setText("Username:");

        txtUsername.setEditable(false);
        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        passwordLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        passwordLabel.setText("New Password:");

        txtPassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        lblPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblPasswordError.setText("error label");

        confirmPasswordLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        confirmPasswordLabel.setText("Confirm Password:");

        txtConfirmPassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtConfirmPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConfirmPasswordActionPerformed(evt);
            }
        });

        lblConfirmPasswordError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblConfirmPasswordError.setForeground(new java.awt.Color(255, 0, 0));
        lblConfirmPasswordError.setText("error label");

        showPassBox.setText("Show Password");
        showPassBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPassBoxActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/databaseproject/pics/icons8-pow-50.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelUsername)
                            .addComponent(jLabelName)
                            .addComponent(jLabelAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPhone)
                            .addComponent(passwordLabel)
                            .addComponent(confirmPasswordLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUsername)
                            .addComponent(txtName)
                            .addComponent(txtPhone)
                            .addComponent(txtPassword)
                            .addComponent(txtConfirmPassword)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblPhoneError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                                .addComponent(lblPasswordError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(showPassBox, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblConfirmPasswordError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblAddressError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                                .addComponent(lblNameError, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnPrevious)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MainMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAddress)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddressError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhoneError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPasswordError)
                    .addComponent(passwordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmPasswordLabel)
                    .addComponent(lblConfirmPasswordError)
                    .addComponent(txtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPassBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MainMenuButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDelete)
                        .addComponent(btnNext)
                        .addComponent(btnPrevious)
                        .addComponent(btnUpdate)))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainMenuButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_MainMenuButtonActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        
         // TODO add your handling code here:
        try {
            // make the result set scrolable forward/backward updatable
//            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            if (isValidData()) {
                int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to update your information?", "Confirmation",  JOptionPane.YES_NO_OPTION);
                
                if(option == JOptionPane.YES_OPTION)
                {
                con.prepStatement = con.con.prepareStatement("UPDATE customer SET name = ?, address = ?, phone = ? where username = ?");
                
                con.prepStatement.setString(1, txtName.getText());
                con.prepStatement.setString(2, txtAddress.getText());
                con.prepStatement.setString(3, txtPhone.getText());
                con.prepStatement.setString(4, txtUsername.getText());
                
                int result = con.prepStatement.executeUpdate();
                
                if(result<1){
                    javax.swing.JLabel label = new javax.swing.JLabel("Profile has not been updated.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                     getNewData();
                     return;
                }
                if(txtPassword.getText().length()!= 0 || txtConfirmPassword.getText().length()!= 0)
                {
                    MessageDigest md = null;
                try {
                    md = MessageDigest.getInstance("MD5");
                } catch (NoSuchAlgorithmException ex) {
                    //Logger.getLogger(AddLogin.class.getName()).log(Level.SEVERE, null, ex);
                }
                byte[] hash = md.digest(txtPassword.getText().getBytes());
                StringBuffer sb = new StringBuffer();
                
                for (int i = 0; i < hash.length; ++i) {
                    sb.append(Integer.toHexString((hash[i] & 0xFF) | 0x100).toUpperCase().substring(1, 3));
                }
                String encryptedPass = sb.toString().substring (8,24);
                String sqlCMD = "UPDATE loginusers SET password = '" + encryptedPass + "' where username = '" + txtUsername.getText() + "'" ;
                
                result = con.executePrepared(sqlCMD);
                
                }
                
                if (result > 0) {
                    
                    javax.swing.JLabel label = new javax.swing.JLabel(" Profile settings have been updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    getNewData();
                }
                con.prepStatement.close();
                } 
                else if(option == JOptionPane.NO_OPTION)
            {
                javax.swing.JLabel label = new javax.swing.JLabel("Profile has not been updated.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                 getNewData();
            }
                
            } else {

                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating profile." + e.getMessage());

        }

    }//GEN-LAST:event_btnUpdateActionPerformed

     public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
     
    void clearErrorLabels() {
        lblNameError.setText("");
        lblNameError.setVisible(false);
        lblAddressError.setText("");
        lblAddressError.setVisible(false);
        lblPhoneError.setText("");
        lblPhoneError.setVisible(false);
        lblPasswordError.setText("");
        lblPasswordError.setVisible(false);
        lblConfirmPasswordError.setText("");
        lblConfirmPasswordError.setVisible(false);
    }
    boolean isValidData() {

        clearErrorLabels();
        boolean result = true;
        //Checking Name feild
        if (txtName.getText().isEmpty() || txtName.getText().length() > 50) {
            if ( txtName.getText().equals("")) {
                lblNameError.setText("Invalid. Cannot be empty.");    
            }
            else if(txtName.getText().length() > 50)
            {
                lblNameError.setText("Invalid. Must be < 50 chars.");
            }
            lblNameError.setVisible(true);
            result = false;
        }
        //Checking Address feild
        if (txtAddress.getText().isEmpty() || txtAddress.getText().length() > 50) {
            if ( txtAddress.getText().equals("")) {
                lblAddressError.setText("Invalid. Cannot be empty.");    
            }
            else if(txtAddress.getText().length() > 50)
            {
                lblAddressError.setText("Invalid. Must be < 50 chars.");
            }
            lblAddressError.setVisible(true);
            result = false;
        }
        //Checking Phone feild 
        if (txtPhone.getText().trim().isEmpty() || !isInteger(txtPhone.getText().trim()) || txtPhone.getText().trim().length() != 10) {
            if (txtPhone.getText().trim().isEmpty()) {
                lblPhoneError.setText("Invalid. Cannot be empty.");
            } else {
                lblPhoneError.setText("Invalid. Must be 10 integers.");
            }
            lblPhoneError.setVisible(true);
            result = false;
        }
        
            if(txtPassword.getText().length() != 0  || txtConfirmPassword.getText().length() != 0)  {
            //Checking ConfirmPassword feild
            if (txtConfirmPassword.getText().compareTo(txtPassword.getText()) != 0) {
            if (txtConfirmPassword.getText().compareTo(txtPassword.getText()) != 0) {
                lblConfirmPasswordError.setText("Invalid. Passwords don't match.");
            }
            lblConfirmPasswordError.setVisible(true);
            result = false;
        }
       //Checking Password feild
       if ( txtPassword.getText().trim().length()<8) {
            if(txtPassword.getText().trim().length()<8){
                lblPasswordError.setText("Invalid. Must be atleast 8 characters.");
            }
            lblPasswordError.setVisible(true);
            result = false;
        }
        }
      
        
        return result;
    }
    
    private void populateFields() {
        try {
            System.out.println(con.rs.getString("username"));
            System.out.println(con.rs.getString("name"));
            System.out.println(con.rs.getString("address"));
            System.out.println(con.rs.getString("phone"));
            //populate fiels from ResultSet data
            txtUsername.setText(con.rs.getString("username"));
            //txtPassword.setText(con.rs.getString("password"));
            //txtConfPassword.setText(con.rs.getString("password"));
            txtName.setText(con.rs.getString("name"));
            txtAddress.setText(con.rs.getString("address"));
            txtPhone.setText(con.rs.getString("phone"));
            //if(rs.getInt("type")==0)
                //cmbType.setSelectedItem("Administrator");
            //else
                //cmbType.setSelectedItem("User");
                
            EnableDisableButtons();
        } catch (SQLException ex) {
            //Logger.getLogger(updateLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void MoveNext() {
        try {
            //if not the last row of the result set, move to next row
            if (!con.rs.isLast()) {

                con.rs.next();
                populateFields();

            }
        } catch (SQLException ex) {
            //Logger.getLogger(updateLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void MovePrevious() {
        try {
            //if not the first row of the result set, move to previous row
            if (!con.rs.isFirst()) {
                con.rs.previous();
                populateFields();

            }
        } catch (SQLException ex) {
            //Logger.getLogger(updateLogin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            //if first row is displayed, disable the previous button. else, enable it
            if (con.rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            //if last row is displayed, disable the next button. else, enable it
            if (con.rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            //Logger.getLogger(updateLogin.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //confirm user wants to update login user
        String conf = JOptionPane.showInputDialog("Are you sure you want to delete?\nYES to delete\nAnything else to cancel");

        System.out.println(conf);
        if(conf.equalsIgnoreCase("YES") != true){
            //if user doesn't enter "YES", do nothing
            return;
        }

        try {
            //create sql command to delete login user where the username is the same as the username in the table
            String sqlCmd = "delete loginusers where username = '" + txtUsername.getText().trim() + "'";
            int result = con.executePrepared(sqlCmd);
            if (result > 0) {
                javax.swing.JLabel label = new javax.swing.JLabel("Username " + txtUsername.getText().trim() + " deleted successfully.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                getNewData();
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting user with username " + txtUsername.getText().trim());

        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtConfirmPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConfirmPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtConfirmPasswordActionPerformed

    private void showPassBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPassBoxActionPerformed
        //if checkbox is checked/unchecked, change display type
        if(showPassBox.isSelected())
        {
            txtPassword.setEchoChar((char)0);
            txtConfirmPassword.setEchoChar((char)0);
        }
        else
        {
            txtPassword.setEchoChar('●');
            txtConfirmPassword.setEchoChar('●');
        }
    }//GEN-LAST:event_showPassBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton MainMenuButton;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelAddress;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelPhone;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JLabel lblAddressError;
    private javax.swing.JLabel lblConfirmPasswordError;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblPasswordError;
    private javax.swing.JLabel lblPhoneError;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JCheckBox showPassBox;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
